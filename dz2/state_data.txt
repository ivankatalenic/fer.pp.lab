# State data

- board[col][row]
- remaining_depth (to explore)
- last_move_col
- last_move_player (computer or human)

Recursive utility algorithm:
Input: a state
	1. Check if there's connect 4:
		- Yes: Return -1 or 1
	2. Check if the remaining_depth is 0:
		- Yes: Return 0
	3. For each valid next move:
		1. Compute the state
			1. board
			2. remaining_depth
			3. last_move_col
			4. last_move_player
		2. Call the recursive utility algorithm
		3. If the returned utility is 1 and the state's last_move_player is computer: Return 1
		4. Append the returned utility to the list
	4. Compute the average utility value of the list
	5. Return the computed utility

Scheduling tree algorithm:
Input: a state, depth
	1. Check if there's connect 4:
		- Yes: Return -1 or 1
	2. Check if the remaining_depth is 0:
		- Yes: Return 0
	3. For each valid next move:
		1. Compute the state
			1. board
			2. remaining_depth
			3. last_move_col
			4. last_move_player
		2. Call the recursive utility algorithm
		3. If the returned utility is 1 and the state's last_move_player is computer: Return 1
		4. Append the returned utility to the list
	4. Compute the average utility value of the list
	5. Return the computed utility
